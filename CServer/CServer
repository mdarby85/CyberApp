#include&lt;stdio.h&gt;
#include&lt;string.h&gt;	//strlen
#include&lt;stdlib.h&gt;	//strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt;	//inet_addr
#include&lt;unistd.h&gt;	//write
#include <netinet/in.h>
#include <libpq-fe.h>
#include <time.h>
#include "Decoder.h"
#include "Database.h"
#include&lt;pthread.h&gt; //for threading , link with lpthread
#define MAX 800
#define PORT 12348

void *connection_handler(void *);

int main(int argc , char *argv[])
{
	int socket_desc , new_socket , c , *new_sock;
	struct sockaddr_in server , client;
	char *message;
	
	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf(&quot;Could not create socket&quot;);
	}
	
	//Prepare the sockaddr_in structure
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY;
	server.sin_port = htons( PORT );
	
	//Bind
	if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
	{
		puts(&quot;bind failed&quot;);
		return 1;
	}
	puts(&quot;bind done&quot;);
	
	//Listen
	listen(socket_desc , 3);
	
	//Accept and incoming connection
	puts(&quot;Waiting for incoming connections...&quot;);
	c = sizeof(struct sockaddr_in);
	while( (new_socket = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c)) )
	{
		puts(&quot;Connection accepted&quot;);
		
		pthread_t sniffer_thread;
		new_sock = malloc(1);
		*new_sock = new_socket;
		
		if( pthread_create( &amp;sniffer_thread , NULL ,  connection_handler , (void*) new_sock) &lt; 0)
		{
			perror(&quot;could not create thread&quot;);
			return 1;
		}
		
		//Now join the thread , so that we dont terminate before the thread
		//pthread_join( sniffer_thread , NULL);
		puts(&quot;Handler assigned&quot;);
	}
	
	if (new_socket&lt;0)
	{
		perror(&quot;accept failed&quot;);
		return 1;
	}
	
	return 0;
}

void *connection_handler(void *socket_desc)
{
	//Get the socket descriptor
	int sock = *(int*)socket_desc;
	char buff[MAX];
    int n;
    for (;;) {
        bzero(buff, MAX);
        read(sockfd, buff, sizeof(buff));
        if(buff[0] == 8)
            break;
        char* myResponse;
        myResponse = handleOptions(buff, conn);
		printf("Response: %d\n",myResponse[0]);
		int responseLength = findResponseLength(buff);
        bzero(buff, MAX);
        n = 0;
        /* and send that buffer to client */
        write(sock, myResponse, sizeof(char)*responseLength);
    }
		
	//Free the socket pointer
	free(socket_desc);
	
	return 0;
}
